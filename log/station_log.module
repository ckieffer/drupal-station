<?php
// $Id: station_log.module,v 1.24 2010/01/28 00:00:00 thumb Exp $

/**
 * @todo Recently played block with admin settings (number of items). Include Ajax update of list.
 * @todo Validate song names against MusicBrainz.
 * @todo Create a "song not found" in MusicBrainz report.
 * @todo Handle multiple schedules.
 * @todo Set $node->uid to 0 or 1. Search for uid used by others for cron operations.
 * @todo Look into getting setting genre for station_catalog items, does MusicBrainz provide genre?
 * @todo Implement views for pages and blocks
 */

/**
 * Implementation of hook_help().
 */
function station_log_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/station/log':
      return t("Logs track metadata from SHOUTcast streams.");
  }
}

/**
 * Implementation of hook_perm().
 */
function station_log_perm() {
  return array(
    'administer station log',
    'access station log content'
  );
}

/**
 * Implementation of hook_access().
 */
function station_log_access($op, $node, $account) {
  if (user_access('administer station log', $account)) {
    return TRUE;
  }
  switch ($op) {
    case 'view':
      return user_access('view station log content', $account);
  }
}

/**
 * Implementation of hook_menu().
 */
function station_log_menu() {
  // Get the default schedule's title
  $schedule_nid = variable_get('station_schedule_default', 0);
  $schedule_title = db_result(db_query("SELECT n.title FROM {station_schedule} s JOIN {node} n ON n.nid = s.nid WHERE s.nid = $schedule_nid"));

  $items['admin/settings/station/log'] = array(
          'title' => 'Log',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('station_log_admin_settings'),
          'access arguments' => array('administer site configuration'),
          'file' => 'station_log.admin.inc',
          'type' => MENU_LOCAL_TASK
  );
  $items['station/log/update'] = array(
          'title' => 'Update the station log',
          'description' => 'Update the station log',
          'page callback' => 'station_log_update_page',
          'access arguments' => array('access station log content'),
          'type' => MENU_CALLBACK,
  );
  $items['station/log/recent'] = array(
          'title' => "Recently played on $schedule_title",
          'description' => 'View songs recently played',
          'page callback' => 'station_log_recent_page',
          'access arguments' => array('access station log content'),
          'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation hook_cron().
 */
function station_log_cron() {

}

/**
 * Get the most recent timestamp for logged tracks.
 *
 * @param
 *   A station schedule nid.
 *
 * @return
 *   UNIX timestamp
 */
function station_log_get_max_timestamp($schedule_nid) {
  $result = db_query('SELECT MAX(timestamp) AS timestamp FROM {station_log} WHERE schedule_nid = %d', $schedule_nid);
  $array = db_fetch_array($result);
  return $array['timestamp'];
}

/**
 * Pull an array of tracks from a SHOUTcast song history object.
 *
 * @return
 *   An associative track history array
 */
function station_log_get_shoutcast_tracks() {
  $xml = shoutcast_get_xml();
  $songhistory = $xml->SONGHISTORY;
  foreach($songhistory->SONG as $key => $track) {
    $parts = explode(' - ', $track->TITLE);
    // @todo Admin setting to define track info order, default order: artist, song, album, label
    $tracks[(int) $track->PLAYEDAT] = array(
        'artist' => trim($parts[0]),
        'song' => trim($parts[1]),
        'album' => trim($parts[2]),
        'label' => trim($parts[3]),
        'raw' => (string) $track->TITLE,
      );
  }
  return $tracks;
}

/**
 * Get album id from station catalog, if the album doesn't exist, add it.
 *
 * @param $track
 *   Track info, including artist, album, song, and label.
 *
 * @return
 *   A station_catalog album's nid.
 */
function station_log_album($track) {
  // Do we have the album in the catalog already?
  $node = db_fetch_object(db_query("SELECT MIN(nid) AS nid, artist, album, year, label FROM {station_catalog} WHERE artist = '%s' AND album = '%s'", $track['artist'], $track['album']));

  // If not, insert this as a new album
  if (!$node->nid) {
    if (!empty($track['artist']) && !empty($track['album'])) {
      $node = new stdClass();
      $node->type = 'station_album';
      $node->title = $track['artist'] . ' - ' . $track['album'];
      $node->uid = 1;
		  $node->album['artist'] = $track['artist'];
		  $node->album['album'] = $track['album'];
		  $node->album['label'] = $track['label'];
      $node->album['number'] = station_catalog_album_next_number();
      $node = station_catalog_update_album_from_musicbrainz($node);
      node_save($node);
    }
  }
  return (!empty($node->nid)) ? $node->nid : false;
}

/**
 * Get song's played from the stream and log them.
 *
 * @param
 *   A station schedule nid.
 *
 * @return
 *   The number tracks logged.
 */
function station_log_new_tracks($schedule_nid) {
  // Get SHOUTcast SONGHISTORY, reverse the order and preserve the keys
  $tracks = array_reverse(station_log_get_shoutcast_tracks(), true);

  // Get last timestamp logged from the station log, we'll only log tracks since then
  $max_timestamp = station_log_get_max_timestamp($schedule_nid);

  // Count the number of songs logged
  $tracks_logged = 0;

  // Loop through and log each new track
  foreach ($tracks as $timestamp => $track) {
    if (empty($max_timestamp) || $timestamp > $max_timestamp) {
      // Get the album nid from station catalog, add it if new
      $track['catalog_nid'] = station_log_album($track);

      // Log the track id
      if ($track['catalog_nid']) {
        station_log_add($schedule_nid, $timestamp, $track);
        $tracks_logged++;
      }
    }
  }
  watchdog('station_log', "Logged $tracks_logged tracks.", NULL, WATCHDOG_INFO);

  return $tracks_logged;
}

/**
 * Add a track to station_log.
 *
 * @param
 *   A station schedule nid.
 * @param $timestamp
 *    The date and time the track was played as a Unix timestamp.
 * @param $track
 *    An array containing track info.
 */
function station_log_add($schedule_nid, $timestamp, $track) {
  $log_track_nid = db_result(db_query("SELECT log_track_nid FROM {station_log_track} WHERE catalog_nid = %d AND title = '%s'", $track['catalog_nid'], $track['title']));

  if (!$log_track_nid) {
    $log_track_nid = station_log_track_add($track);
  }
  if ($log_track_nid > 0) {
    db_query("INSERT INTO {station_log} (schedule_nid, timestamp, log_track_nid) VALUES (%d, %d, %d)", $schedule_nid, $timestamp, $log_track_nid);
  }
}

/**
 * Add a track to station_log_track.
 *
 * @param $track
 *   An array containing an individual track's catalog_nid and song title.
 *
 * @return
 *   The logged track's log_track_nid.
 */
function station_log_track_add($track) {
  db_query("INSERT INTO {station_log_track} (catalog_nid, title) VALUES (%d, '%s')", $track['catalog_nid'], $track['song']);
  return db_last_insert_id('drpl_station_log_track', 'log_track_nid');
}

/**
 * Provide a page to call from cron to update the log without running hook_cron().
 */
function station_log_update_page() {
  // Get the first web stream found to set the default shoutcast history url
  $schedule_nid = variable_get('station_schedule_default', 0);
  $tracks_logged = station_log_new_tracks($schedule_nid);
  return t("Added $tracks_logged tracks to the station log.");
}

/**
 * Display songs played during the past N hours.
 *
 * @todo Create an admin setting for how many hours to show
 */
function station_log_recent_page() {
  drupal_add_css(drupal_get_path('module', 'station_log') .'/station_log.css');
  $tracks = station_log_get_recent_tracks(3, 'hour');
  $fields = array('time', 'artist', 'song', 'album', 'label', 'year');
  $list = station_log_track_list($tracks, $fields);
  return $list;
}

/**
 * Implementation of hook_block().
 *
 * @todo Create a block setting for number or tracks to display
 * @todo Create a block setting for time format, select from Drupal date formats, recommend format
 */
function station_log_block($op = 'list', $delta = 0) {
  drupal_add_css(drupal_get_path('module', 'station_log') .'/station_log.css');

  // listing of blocks, such as on the admin/block page
  if ($op == 'list') {
    $block[0]['info'] = t('Station log recently played');
    return $block;

  } elseif ($op == 'view') {
    $block['content'] = '';
    //$date_format = variable_get('station_log_block_dateformat', 'h:i');
    $limit = 6; //variable_get('station_log_block_limit', 5);
    $tracks = station_log_get_recent_tracks($limit);
    $fields = array('artist', 'song');

    // set up the block
    $block['subject'] = variable_get('station_log_block_subject', '');
    $block['content'] = station_log_track_list($tracks, $fields);
    $block['content'] .= '<a href="http://' . $_SERVER['HTTP_HOST'] .
          base_path() . 'station/log/recent" class="more">more</a>';
  }
  return $block;
}

/**
 * Get recent tracks played, either a track count or tracks played in the past N hours.
 *
 * @param $limit
 *   Number of tracks to return, either a track count or an hour count
 *
 * @param $unit
 *   The unit of measure, either 'count' or 'hour'
 *
 * @return
 *    A database result object containing a list of songs
 *
 * @todo Add support for multiple schedules
 */
function station_log_get_recent_tracks($limit, $unit = 'count') {
  $args[] = variable_get('station_schedule_default', 0);
  $clauses = '';
  if ($unit == 'hour') {
    $clauses .= 'AND l.timestamp > %d';
    $args[] = (mktime() - ($limit * 4680)); // 4320
    $limit = 1000;
  }
  $tracks = db_query_range("SELECT l.timestamp, lt.title, c.artist, c.album, c.label, c.year, c.asin
    FROM {station_log} l
    JOIN {station_log_track} lt ON lt.log_track_nid = l.log_track_nid
    JOIN {station_catalog} c ON c.nid = lt.catalog_nid
    WHERE l.schedule_nid = %d $clauses
    ORDER BY l.timestamp DESC", $args, 0, $limit);

  return $tracks;
}

/**
 * Format a list of tracks as an HTML unordered list.
 *
 * @param $tracks
 *    An object containing a list of tracks to format
 *
 * @param $fields
 *    An array containing which fields to display (time, artist, song, album, label, year)
 *
 * @return
 *    An HTML unordered list
 *
 * @todo Adjust time for the user's timezone (see station.nowplaying)
 * @todo Make themeable, use Drupal theme functions
 * @todo Don't build the buy link if amazon.module's not enabled
 */
function station_log_track_list($tracks, $fields) {
  $list = '<ul class="station-log">';
  while ($track = db_fetch_object($tracks)) {
    $list .= "<li>";
    $list .= station_log_buy_amazon_link($track);
    if (in_array('time', $fields) && !empty($track->timestamp)) {
      $list .= '<span class="datetime">' . date('H:i', $track->timestamp) . '</span>';
    }
    if (in_array('artist', $fields) && !empty($track->artist)) {
      $list .= '<span class="artist">' . $track->artist . '</span>';
    }
    if (in_array('song', $fields) && !empty($track->title)) {
      $list .= '<span class="song">' . $track->title . '</span>';
    }
    if (in_array('album', $fields) && !empty($track->album)) {
      $list .= '<span class="album">' . $track->album . '</span>';
    }
    if (in_array('label', $fields) && !empty($track->label)) {
      $list .= '<span class="label">' . $track->label . '</span>';
    }
    if (in_array('year', $fields) && !empty($track->year)) {
      $list .= '<span class="year">' . $track->year . '</span>';
    }
    $list .= "</li>";
  }
  $list .= "</ul>";
  return $list;
}

/**
 * Create a "buy" from Amazon link for albums and artists.
 *
 * @param $track
 *    An object containing a track's title, artist, album, etc.
 *
 * @return
 *    A link to either an Amazon detail page or an artist search
 *
 * @todo Get affiliate code from amazon.module
 */
function station_log_buy_amazon_link($track) {
  $affiliate_code = 'indiesf-20';
  if (!empty($affiliate_code)) {
    if (!empty($track->asin)) {
      $link = "http://amazon.com/gp/product/$track->asin?ie=UTF8&tag=$affiliate_code&linkCode=as2&camp=1789&creative=9325&creativeASIN=$track->asin";
      $title = t("Buy $track->album by $track->artist from Amazon.com");
    }
    else {
      $keyword = urlencode($track->artist . ' ' . $track->album);
      $link = "http://amazon.com/exec/obidos/redirect?tag=$affiliate_link&creative=9325&camp=1789&link_code=ur2&path=external-search%3Fsearch-type%3Dss%26index%3Dmusic%26keyword%3D$keyword";
      $title = t("Buy music by $track->artist from Amazon.com");
    }
    return "<a href=\"$link\" class=\"station-log-buy-button\" target=\"_blank\" title=\"$title\">" . t('buy') . "</a>";

  }
  else {
    return null;
  }
}
